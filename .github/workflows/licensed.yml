name: Licensed

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  licensed:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - uses: ruby/setup-ruby@44511735964dcb71245e7e55f72539531f7bc0eb # v1.257.0
        with:
          bundler-cache: true

      - name: Build Gem
        run: |
          mkdir -p $HOME/.gem
          touch $HOME/.gem/credentials
          chmod 0600 $HOME/.gem/credentials
          gem build *.gemspec

      - name: Set commit message
        id: commit
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "message=Auto-update license files for PR #${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          else
            echo "message=Auto-update license files" >> $GITHUB_OUTPUT
          fi

      - uses: licensee/licensed-ci@98eef7c23bcf8211e108781a9594e969da913e89 # v1.11.2
        with:
          # override the command to use licensed built from this repo
          command: bundle exec licensed

          # changes made using GITHUB_TOKEN will not re-trigger this action.
          # set a custom token so that added or changed cached license files
          # will cause this workflow to run and validate cached contents
          #
          # see https://docs.github.com/en/actions/security-guides/automatic-token-authentication#using-the-github_token-in-a-workflow
          # for additional details on GITHUB_TOKEN not re-triggering this action
          github_token: ${{ secrets.GITHUB_TOKEN }}

          # the "push" workflow updates license metadata files on the branch being examined.
          # e.g. when the action is run on main, changes are pushed to main

          # the "branch" workflow creates a new branch for license file updates.
          # e.g. when the action is run on main, changes are pushed to a new "main-licenses" branch

          # see https://github.com/github/licensed-ci for more details
          workflow: branch

          commit_message: ${{ steps.commit.outputs.message }}
